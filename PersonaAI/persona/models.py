from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.db.models.signals import post_save
from django.dispatch import receiver

class Portfolio(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    TEMPLATE_CHOICES = [
        ('modern', 'Modern Dark'),
        ('minimalist', 'Clean Minimalist'),
        ('creative', 'Creative Colorful'),
        ('professional', 'Professional Light'),
        ('experimental', 'Experimental' ),
    ]
    design_template = models.CharField(
        max_length=20,
        choices=TEMPLATE_CHOICES,
        default='modern'
    )
    resume = models.FileField(upload_to='resumes/', null=True, blank=True, help_text="Upload your resume (PDF or DOCX).")
    slug = models.SlugField(max_length=100, unique=True, blank=True)
    job_title = models.CharField(max_length=100, blank=True)
    github_url = models.URLField(max_length=200, blank=True)
    about_me_input = models.TextField(blank=True, help_text="Raw notes about yourself for the AI.")
    about_me_generated = models.TextField(blank=True, help_text="Polished 'About Me' section generated by AI.")
    skills_input = models.TextField(blank=True, help_text="Comma-separated list of your skills.")
    background_image = models.ImageField(upload_to='backgrounds/', null=True, blank=True)
    email = models.EmailField(max_length=254, blank=True)
    linkedin_url = models.URLField(max_length=200, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user.username}'s Portfolio"

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.user.username)
        super().save(*args, **kwargs)

    def get_skills_list(self):
        if not self.skills_input:
            return []
        return [skill.strip() for skill in self.skills_input.split(',')]
    
    # --- NEW HELPER METHODS ---
    def get_experiences(self):
        return self.projects.filter(category='experience').order_by('display_order')

    def get_projects(self):
        return self.projects.filter(category='project').order_by('display_order')


@receiver(post_save, sender=User)
def create_user_portfolio(sender, instance, created, **kwargs):
    if created:
        Portfolio.objects.create(user=instance)


class Project(models.Model):
    # --- NEW CATEGORY FIELD ---
    CATEGORY_CHOICES = [
        ('experience', 'Work Experience'),
        ('project', 'Project'),
    ]
    portfolio = models.ForeignKey(Portfolio, on_delete=models.CASCADE, related_name='projects')
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, default='project')
    
    name = models.CharField(max_length=100)
    technologies = models.CharField(max_length=200, blank=True) # Will store Company for experience, Tech for projects
    description_generated = models.TextField(blank=True)
    display_order = models.PositiveIntegerField(default=0)
    project_url = models.URLField(max_length=200, blank=True)
    class Meta:
        ordering = ['display_order']

    def __str__(self):
        return f"[{self.get_category_display()}] {self.name} for {self.portfolio.user.username}"

    # --- THIS IS THE NEW METHOD ---
    def get_technologies_list(self):
        """Returns the technologies string as a list of individual items."""
        if not self.technologies:
            return []
        # This splits the string by comma and removes any extra whitespace
        return [tech.strip() for tech in self.technologies.split(',')]

